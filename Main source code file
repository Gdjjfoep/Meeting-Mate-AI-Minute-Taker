#summarize and export button issue 


import sys
import asyncio
from PyQt5 import QtWidgets, QtGui
from PyQt5.QtCore import Qt, pyqtSignal, QThread, QUrl
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWebEngineWidgets import QWebEnginePage, QWebEngineSettings
from deepgram import (
    DeepgramClient,
    DeepgramClientOptions,
    LiveTranscriptionEvents,
    LiveOptions,
    Microphone,
)
from dotenv import load_dotenv
from PyQt5.QtWidgets import QFileDialog
import openai  # Import OpenAI API client

# Load environment variables (like API key)
load_dotenv()

# Set your OpenAI API key here
openai.api_key = 'YOUR_OPENAI_API_KEY'

# Transcript Collector
class TranscriptCollector:
    def __init__(self):
        self.reset()

    def reset(self):
        self.transcript_parts = []

    def add_part(self, part):
        if part.strip():  # Ignore empty parts
            self.transcript_parts.append(part)

    def get_full_transcript(self):
        return ' '.join(self.transcript_parts)

transcript_collector = TranscriptCollector()

# Deepgram Transcription Thread
class TranscriptionThread(QThread):
    transcript_updated = pyqtSignal(str)  # Signal to update the highlights area

    def __init__(self):
        super().__init__()
        self.is_running = False  # Change to ensure it's started properly
        self._stop = False  # Add an explicit flag to control stopping

    def run(self):
        asyncio.run(self.get_transcript())

    async def get_transcript(self):
        try:
            # Create Deepgram client
            config = DeepgramClientOptions(options={"keepalive": "true"})
            deepgram = DeepgramClient("API_KEY", config)
            dg_connection = deepgram.listen.asyncwebsocket.v("1")

            # Modified on_message handler
            async def on_message(*args, **kwargs):
                result = kwargs.get("result", None)
                if result and hasattr(result, 'channel') and hasattr(result.channel, 'alternatives'):
                    sentence = result.channel.alternatives[0].transcript
                    if not result.speech_final:
                        transcript_collector.add_part(sentence)
                    else:
                        transcript_collector.add_part(sentence)
                        full_sentence = transcript_collector.get_full_transcript()
                        self.transcript_updated.emit(full_sentence)  # Emit the updated transcript
                        transcript_collector.reset()

            # Modified on_error handler
            async def on_error(*args, **kwargs):
                error = kwargs.get("error", None)
                if error:
                    print(f"\n\n{error}\n\n")

            # Set up Deepgram connection
            dg_connection.on(LiveTranscriptionEvents.Transcript, on_message)
            dg_connection.on(LiveTranscriptionEvents.Error, on_error)

            options = LiveOptions(
                model="nova-3",
                punctuate=True,
                language="en-US",
                encoding="linear16",
                channels=1,
                sample_rate=16000,
                endpointing=True,
            )

            # Start transcription
            await dg_connection.start(options)

            # Open microphone stream
            microphone = Microphone(dg_connection.send)
            microphone.start()

            while self.is_running and not self._stop:  # Control flow with both flags
                if not microphone.is_active():
                    break
                await asyncio.sleep(1)

            # Finish after transcription ends
            microphone.finish()
            await dg_connection.finish()

        except Exception as e:
            print(f"Could not open socket: {e}")

    def stop(self):
        self._stop = True
        self.is_running = False

    def start_transcription(self):
        self.is_running = True
        self._stop = False  # Reset stop flag
        self.start()  # Restart the transcription thread

# Summary Functionality using OpenAI
def summarize_text(text):
    try:
        # Use OpenAI API to summarize the transcript
        response = openai.Completion.create(
            engine="gpt-3.5-turbo",  # Or "gpt-4" for the more advanced version
            prompt=f"Please summarize the following meeting transcript, highlighting the key points, action items, decisions made, and any important follow-ups. Be sure to include a brief overview of the main topics discussed and the key takeaways from the conversation.:\n\n{text}",
            max_tokens=200,  # You can adjust this to control the summary length
            temperature=0.5,  # Control the creativity/variability of the summary
        )
        return response.choices[0].text.strip()  # Get the summarized text
    except Exception as e:
        print(f"Error while summarizing: {e}")
        return "Sorry, summarization failed."

# Main UI Class
class MeetingMateUI(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Meeting Mate: AI Minute Taker")
        self.setGeometry(100, 100, 1200, 800)
        self.setStyleSheet("background-color: #A5BFCC;")
        self.initUI()

        self.transcription_thread = TranscriptionThread()  # Create transcription thread
        self.transcription_thread.transcript_updated.connect(self.update_highlight_area)

    def initUI(self):
        main_layout = QtWidgets.QHBoxLayout(self)

        # Left Panel (controls)
        left_panel = QtWidgets.QVBoxLayout()

        # Title
        title = QtWidgets.QLabel("Meeting Mate: AI Minute Taker")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QtGui.QFont("Arial", 16, QtGui.QFont.Bold))
        title.setStyleSheet("background-color: #FFFFFF; border: 1px solid #B0B0B0; padding: 10px;")
        left_panel.addWidget(title)
        left_panel.addSpacing(10)

        # Buttons
        self.start_button = self.create_button("Start", "green", self.start_transcription)
        self.stop_button = self.create_button("Stop", "red", self.stop_transcription)
        self.export_button = self.create_button("Export", "blue", self.export_transcript)

        for button in [self.start_button, self.stop_button, self.export_button]:
            left_panel.addWidget(button)

        # Summary Section
        summary_layout = QtWidgets.QVBoxLayout()
        summary_label = QtWidgets.QLabel("Summary")
        summary_label.setFont(QtGui.QFont("Arial", 12, QtGui.QFont.Bold))
        summary_label.setStyleSheet("background-color: #FFFFFF; border: 1px solid #B0B0B0; padding: 5px;")
        self.summary_area = QtWidgets.QTextEdit()
        self.summary_area.setReadOnly(True)
        self.summary_area.setStyleSheet("border: 1px solid black;")
        summary_layout.addWidget(summary_label)
        summary_layout.addWidget(self.summary_area)
        self.summarize_button = self.create_button("Summarize", "purple", self.summarize_meeting, "border-radius: 10px; height: 40px;")
        summary_layout.addWidget(self.summarize_button)
        left_panel.addLayout(summary_layout)

        # Center Panel (Meeting Screen)
        center_panel = QtWidgets.QVBoxLayout()

        # Meeting Screen Section (with URL input box)
        meeting_screen_label = self.create_section_label("Meeting Screen")
        self.jitsi_view = QWebEngineView()
        self.jitsi_view.setStyleSheet("border: 2px solid black;")  # Styling
        self.jitsi_view.setUrl(QUrl("about:blank"))  # Blank initially

        url_input_layout = QtWidgets.QHBoxLayout()
        self.url_input = QtWidgets.QLineEdit()
        self.url_input.setPlaceholderText("Enter Meeting URL")
        self.url_input.setStyleSheet("border: 1px solid #B0B0B0; padding: 5px; width: 300px;")
        self.join_button = self.create_button("Join Meeting", "purple", self.join_meeting)
        url_input_layout.addWidget(self.url_input)
        url_input_layout.addWidget(self.join_button)

        # Add to layout
        center_panel.addWidget(meeting_screen_label)
        center_panel.addLayout(url_input_layout)
        center_panel.addWidget(self.jitsi_view)

        # Right Panel (Highlights)
        right_panel = QtWidgets.QVBoxLayout()
        highlights_label = self.create_section_label("Conversation")
        self.highlights_area = self.create_text_area()  # This is the highlight area
        right_panel.addWidget(highlights_label)
        right_panel.addWidget(self.highlights_area)

        main_layout.addLayout(left_panel, stretch=1)
        main_layout.addLayout(center_panel, stretch=3)
        main_layout.addLayout(right_panel, stretch=2)

        self.setLayout(main_layout)

    def create_button(self, text, color, function, extra_style=""):
        button = QtWidgets.QPushButton(text)
        button.setStyleSheet(f"background-color: {color}; color: white; {extra_style}")
        button.clicked.connect(function)
        return button

    def create_section_label(self, text):
        label = QtWidgets.QLabel(text)
        label.setFont(QtGui.QFont("Arial", 12, QtGui.QFont.Bold))
        label.setFixedHeight(40)  # Set the height to match other labels (example height)
        label.setStyleSheet("background-color: #FFFFFF; border: 1px solid #B0B0B0; padding: 5px;")
        return label

    def create_text_area(self):
        text_area = QtWidgets.QTextEdit()
        text_area.setReadOnly(True)
        text_area.setStyleSheet("border: 1px solid black; background-color: #F0F0F0;")
        return text_area

    def start_transcription(self):
        self.highlights_area.append("Transcription Started...\n")  # Show in Highlights
        self.transcription_thread.start_transcription()  # Start the transcription thread

    def stop_transcription(self):
        self.highlights_area.append("Transcription Stopped...\n")  # Show in Highlights
        self.transcription_thread.stop()  # Stop the transcription thread

    def summarize_meeting(self):
        # Get the full transcript
        transcript = transcript_collector.get_full_transcript()
        
        if not transcript:
            self.highlights_area.append("No transcript available to summarize.\n")  # Show in Highlights
            return
        
        # Generate summary of the current transcript
        summary = summarize_text(transcript)
        
        # Update the summary area with the latest summary
        self.summary_area.setText(summary)  # Set the summary in the summary area
        self.highlights_area.append(f"Summary updated:\n{summary}\n")  # Show in Highlights

    def export_transcript(self):
        # Export transcript to a file
        transcript = transcript_collector.get_full_transcript()
        if not transcript:
            self.highlights_area.append("No transcript to export.\n")  # Show in Highlights
            return

        # Show file save dialog
        file_path, _ = QFileDialog.getSaveFileName(self, "Save Transcript", "", "Text Files (*.txt);;All Files (*)")
        if file_path:
            with open(file_path, "w") as file:
                file.write(transcript)
            self.highlights_area.append(f"Transcript exported to {file_path}\n")  # Show in Highlights

    def join_meeting(self):
        url = self.url_input.text().strip()
        if url:
            self.jitsi_view.setUrl(QUrl(url))
            self.highlights_area.append("Joining meeting...\n")  # Show in Highlights

            # Grant permissions for microphone and camera
            def grant_permissions():
                self.jitsi_view.page().setFeaturePermission(
                    QUrl(url),  # The URL to grant permissions for
                    QWebEnginePage.MediaAudioCapture,
                    QWebEnginePage.PermissionGrantedByUser
                )
                self.jitsi_view.page().setFeaturePermission(
                    QUrl(url),  # The URL to grant permissions for
                    QWebEnginePage.MediaVideoCapture,
                    QWebEnginePage.PermissionGrantedByUser
                )

            # Wait for the page to load before granting permissions
            self.jitsi_view.loadFinished.connect(grant_permissions)

            # Enable WebRTC
            self.jitsi_view.settings().setAttribute(QWebEngineSettings.WebRTCPublicInterfacesOnly, False)
        else:
            self.highlights_area.append("Please enter a valid meeting URL.\n")  # Show in Highlights

    # Method to update the highlights area with the new transcription text
    def update_highlight_area(self, transcript):
        self.highlights_area.append(f"Speaker: {transcript}\n")

# Run the UI
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    ui = MeetingMateUI()
    ui.show()
    sys.exit(app.exec_())


