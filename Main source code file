# its perfect

import sys
import asyncio
from PyQt5 import QtWidgets, QtGui
from PyQt5.QtCore import Qt, pyqtSignal, QThread, QUrl
from PyQt5.QtWebEngineWidgets import QWebEngineView, QWebEnginePage, QWebEngineSettings
from deepgram import (
    DeepgramClient,
    DeepgramClientOptions,
    LiveTranscriptionEvents,
    LiveOptions,
    Microphone,
)
from dotenv import load_dotenv
from PyQt5.QtWidgets import QFileDialog
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer
from sumy.summarizers.text_rank import TextRankSummarizer
import nltk
import os

# Set the NLTK data path explicitly
nltk_data_path = os.path.join(os.path.expanduser("~"), "nltk_data")
nltk.data.path.append(nltk_data_path)

# Download required NLTK data
nltk.download('punkt', download_dir=nltk_data_path)
nltk.download('punkt_tab', download_dir=nltk_data_path)

# Load environment variables (like API key)
load_dotenv()

# Transcript Collector
class TranscriptCollector:
    def __init__(self):
        self.reset()

    def reset(self):
        self.transcript_parts = []

    def add_part(self, part):
        if part.strip():  # Ignore empty parts
            self.transcript_parts.append(part)

    def get_full_transcript(self):
        return ' '.join(self.transcript_parts)

transcript_collector = TranscriptCollector()

# Deepgram Transcription Thread
class TranscriptionThread(QThread):
    transcript_updated = pyqtSignal(str)  # Signal to update the highlights area

    def __init__(self):
        super().__init__()
        self.is_running = False
        self._stop = False
        self.dg_connection = None
        self.microphone = None
        self.loop = None  # Event loop reference

    def run(self):
        self.loop = asyncio.new_event_loop()
        asyncio.set_event_loop(self.loop)
        self.loop.run_until_complete(self.get_transcript())

    async def get_transcript(self):
        try:
            config = DeepgramClientOptions(options={"keepalive": "true"})
            deepgram = DeepgramClient("b12553e7fd323f9b22230f7949d987f7c0aca055", config)
            self.dg_connection = deepgram.listen.asyncwebsocket.v("1")

            async def on_message(*args, **kwargs):
                result = kwargs.get("result", None)
                if result and hasattr(result, 'channel') and hasattr(result.channel, 'alternatives'):
                    sentence = result.channel.alternatives[0].transcript
                    if sentence.strip():  # Only add non-empty sentences
                        transcript_collector.add_part(sentence)
                        self.transcript_updated.emit(sentence)  # Emit only the new sentence

            async def on_error(*args, **kwargs):
                error = kwargs.get("error", None)
                if error:
                    print(f"\n\n{error}\n\n")

            self.dg_connection.on(LiveTranscriptionEvents.Transcript, on_message)
            self.dg_connection.on(LiveTranscriptionEvents.Error, on_error)

            options = LiveOptions(
                model="nova-3",
                punctuate=True,
                language="en-US",
                encoding="linear16",
                channels=1,
                sample_rate=16000,
                endpointing=True,
            )

            await self.dg_connection.start(options)

            self.microphone = Microphone(self.dg_connection.send)
            self.microphone.start()

            while self.is_running and not self._stop:
                if not self.microphone.is_active():
                    break
                await asyncio.sleep(1)

            self.microphone.finish()
            await self.dg_connection.finish()

        except asyncio.CancelledError:
            print("Transcription task cancelled.")
        except Exception as e:
            print(f"Could not open socket: {e}")

    def stop(self):
        self._stop = True
        self.is_running = False
        if self.microphone:
            self.microphone.finish()
        if self.dg_connection:
            # We no longer use asyncio.run, we schedule finish to the current event loop
            if self.loop:
                self.loop.create_task(self.dg_connection.finish())

    def start_transcription(self):
        self.is_running = True
        self._stop = False
        self.start()

# Summary Functionality using Sumy
def summarize_with_sumy(text, sentences_count=3, method="lsa"):
    try:
        parser = PlaintextParser.from_string(text, Tokenizer("english"))
        if method == "lsa":
            summarizer = LsaSummarizer()
        elif method == "text_rank":
            summarizer = TextRankSummarizer()
        else:
            raise ValueError("Invalid method. Choose 'lsa' or 'text_rank'.")
        summary = summarizer(parser.document, sentences_count)
        return " ".join(str(sentence) for sentence in summary)
    except Exception as e:
        print(f"Error while summarizing: {e}")
        return "Sorry, summarization failed."

# Main UI Class
class MeetingMateUI(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Meeting Mate: AI Minute Taker")
        self.setGeometry(100, 100, 1200, 800)
        self.setStyleSheet("background-color: #A5BFCC;")
        self.initUI()

        self.transcription_thread = None  # Initialize as None

    def initUI(self):
        main_layout = QtWidgets.QHBoxLayout(self)

        # Left Panel (controls)
        left_panel = QtWidgets.QVBoxLayout()

        # Title
        title = QtWidgets.QLabel("Meeting Mate: AI Minute Taker")
        title.setAlignment(Qt.AlignCenter)
        title.setFont(QtGui.QFont("Arial", 16, QtGui.QFont.Bold))
        title.setStyleSheet("background-color: #FFFFFF; border: 1px solid #B0B0B0; padding: 10px;")
        left_panel.addWidget(title)
        left_panel.addSpacing(10)

        # Buttons
        self.start_button = self.create_button("Start", "green", self.start_transcription)
        self.stop_button = self.create_button("Stop", "red", self.stop_transcription)
        self.export_button = self.create_button("Export", "blue", self.export_transcript)

        for button in [self.start_button, self.stop_button, self.export_button]:
            left_panel.addWidget(button)

        # Summary Section
        summary_layout = QtWidgets.QVBoxLayout()
        summary_label = QtWidgets.QLabel("Summary")
        summary_label.setFont(QtGui.QFont("Arial", 12, QtGui.QFont.Bold))
        summary_label.setStyleSheet("background-color: #FFFFFF; border: 1px solid #B0B0B0; padding: 5px;")
        self.summary_area = QtWidgets.QTextEdit()
        self.summary_area.setReadOnly(True)
        self.summary_area.setStyleSheet("border: 1px solid black;")
        summary_layout.addWidget(summary_label)
        summary_layout.addWidget(self.summary_area)
        self.summarize_button = self.create_button("Summarize", "purple", self.summarize_meeting, "border-radius: 10px; height: 40px;")
        summary_layout.addWidget(self.summarize_button)
        left_panel.addLayout(summary_layout)

        # Center Panel (Meeting Screen)
        center_panel = QtWidgets.QVBoxLayout()

        # Meeting Screen Section (with URL input box)
        meeting_screen_label = self.create_section_label("Meeting Screen")
        self.jitsi_view = QWebEngineView()
        self.jitsi_view.setStyleSheet("border: 2px solid black;")
        self.jitsi_view.setUrl(QUrl("about:blank"))

        url_input_layout = QtWidgets.QHBoxLayout()
        self.url_input = QtWidgets.QLineEdit()
        self.url_input.setPlaceholderText("Enter Meeting URL")
        self.url_input.setStyleSheet("border: 1px solid #B0B0B0; padding: 5px; width: 300px;")
        self.join_button = self.create_button("Join Meeting", "purple", self.join_meeting)
        url_input_layout.addWidget(self.url_input)
        url_input_layout.addWidget(self.join_button)

        center_panel.addWidget(meeting_screen_label)
        center_panel.addLayout(url_input_layout)
        center_panel.addWidget(self.jitsi_view)

        # Right Panel (Highlights)
        right_panel = QtWidgets.QVBoxLayout()
        highlights_label = self.create_section_label("Conversation")
        self.highlights_area = self.create_text_area()
        right_panel.addWidget(highlights_label)
        right_panel.addWidget(self.highlights_area)

        main_layout.addLayout(left_panel, stretch=1)
        main_layout.addLayout(center_panel, stretch=3)
        main_layout.addLayout(right_panel, stretch=2)

        self.setLayout(main_layout)

    def create_button(self, text, color, function, extra_style=""):
        button = QtWidgets.QPushButton(text)
        button.setStyleSheet(f"background-color: {color}; color: white; {extra_style}")
        button.clicked.connect(function)
        return button

    def create_section_label(self, text):
        label = QtWidgets.QLabel(text)
        label.setFont(QtGui.QFont("Arial", 12, QtGui.QFont.Bold))
        label.setFixedHeight(40)
        label.setStyleSheet("background-color: #FFFFFF; border: 1px solid #B0B0B0; padding: 5px;")
        return label

    def create_text_area(self):
        text_area = QtWidgets.QTextEdit()
        text_area.setReadOnly(True)
        text_area.setStyleSheet("border: 1px solid black; background-color: #F0F0F0;")
        return text_area

    def start_transcription(self):
        if self.transcription_thread and self.transcription_thread.isRunning():
            return  # Avoid starting multiple threads

        self.highlights_area.append("Transcription Started...\n")
        transcript_collector.reset()  # Reset transcript collector for a new session

        # Create a new thread instance
        self.transcription_thread = TranscriptionThread()
        self.transcription_thread.transcript_updated.connect(self.update_highlight_area)
        self.transcription_thread.start_transcription()

    def stop_transcription(self):
        if self.transcription_thread:
            self.highlights_area.append("Transcription Stopped...\n")
            self.transcription_thread.stop()
            self.transcription_thread.quit()  # Ensure the thread is properly terminated
            self.transcription_thread.wait()  # Wait for the thread to finish
            self.transcription_thread = None  # Reset the thread object

    def summarize_meeting(self):
        transcript = transcript_collector.get_full_transcript()
        print(f"Transcript for summarization: {transcript}")
        
        if not transcript.strip():
            self.highlights_area.append("No transcript available to summarize.\n")
            return
        
        summary = summarize_with_sumy(transcript, sentences_count=3, method="lsa")
        self.summary_area.setText(summary)
        self.highlights_area.append(f"Summary updated:\n{summary}\n")

    def export_transcript(self):
        transcript = transcript_collector.get_full_transcript()
        print(f"Transcript for export: {transcript}")
        
        if not transcript.strip():
            self.highlights_area.append("No transcript to export.\n")
            return

        file_path, _ = QFileDialog.getSaveFileName(self, "Save Transcript", "", "Text Files (*.txt);;All Files (*)")
        if file_path:
            with open(file_path, "w") as file:
                file.write(transcript)
            self.highlights_area.append(f"Transcript exported to {file_path}\n")

    def join_meeting(self):
        url = self.url_input.text().strip()
        if url:
            self.jitsi_view.setUrl(QUrl(url))
            self.highlights_area.append("Joining meeting...\n")

            def grant_permissions():
                self.jitsi_view.page().setFeaturePermission(
                    QUrl(url),
                    QWebEnginePage.MediaAudioCapture,
                    QWebEnginePage.PermissionGrantedByUser
                )
                self.jitsi_view.page().setFeaturePermission(
                    QUrl(url),
                    QWebEnginePage.MediaVideoCapture,
                    QWebEnginePage.PermissionGrantedByUser
                )

            self.jitsi_view.loadFinished.connect(grant_permissions)
            self.jitsi_view.settings().setAttribute(QWebEngineSettings.WebRTCPublicInterfacesOnly, False)
        else:
            self.highlights_area.append("Please enter a valid meeting URL.\n")

    def update_highlight_area(self, transcript):
        self.highlights_area.append(f"Speaker: {transcript}\n")  # Append only the new sentence

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    ui = MeetingMateUI()
    ui.show()
    sys.exit(app.exec_())
